/*
*******************************************************************************
*   Environment Configuration Obfuscation
*   (c) 2018 James Holland
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*******************************************************************************
*/
package org.hoggmania.client.util.protection;

import org.hoggmania.client.util.protection.ObfuscatorInf;
import org.hoggmania.client.util.protection.utils.FindNetworkEntropy;


/**
 * Obfuscate a secret/password using Password Based Encryption (PBE). The
 * algorithm uses the machine information to generated machine specific key,
 * that can be reproduced on the machine. The PBE algorithm is: -<br>
 * <code>
 * <li>Password: generated by MACing the concatenate MAC addresses and System.getProperty("user.home")</li>
 * <li>Salt: generated by MACing  the concatenate MAC addresses and System.getProperty("user.name")</li>
 * <li>Iteration: generated by totalling the decimal value of every character from the concatenate MAC addresses</li>
 * </code> <br>
 * The PBE algorithm used is by default PBEWithSHA1AndDESede, but this can be
 * set on initialisation of the class. The resultant obfuscated secret will
 * contain the algorithm used so it can be used to re-constitute the plain text
 * value. However, the parameters required to generate the PBE are dynamically
 * retrieved from the environment. <br>
 * The format of the obfuscation is
 * <code>{PBE algorithm}encrypted string base64 encoded</code>
 * 
 * @author james.holland
 * 
 */
public class PassphraseObfuscatorHash extends PassphraseObfuscatorImp implements ObfuscatorInf {

	public String toString() {
		return super.toString() + " : " + "Entropy=" + findEntropy();
	}
	

	protected final String findEntropy() {
		String entropy = null;
		if (entropy == null) {
			entropy = FindNetworkEntropy.getNetworkEntropy().replaceAll("-", "").replaceAll(":", "");
			if (entropy == null || entropy.trim().length() == 0)
				throw new RuntimeException("Cannot get local information to generate password");
		}
		return entropy;
	}




}
